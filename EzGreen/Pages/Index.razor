@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using EzGreen.Models
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using static System.Net.Mime.MediaTypeNames;


<h1 style="text-align:center">Ez Green</h1>

@if ( ezGreenProfiles == null )
{
    <div class="form-group" style="text-align:right">
        <div class="alert alert-warning" role="alert">
            <label for="formGroupExampleInput2">תו לא נמצא</label>
        </div>
        <br />
        <button class="btn btn-success" @onclick="(()=>ShowNewProfileDialog=true)">הוספת תו חדש</button>

    </div>
}
else
{
    foreach(var profile in ezGreenProfiles)
    {
<div>
    <label>@profile.ProfileId</label>
    <img src="@profile.ProfilePicture" />
</div>
    }
}
<br />

@*New Profile form*@
<SfDialog Target="#target"
          Width="300px"
          Height="500px"
          MinHeight="350px"
          IsModal="true"
          EnableRtl="true"
          ShowCloseIcon="true"
          @bind-Visible="ShowNewProfileDialog">
    <DialogTemplates>
        <Header>פרופיל חדש</Header>
        <Content>
            <EditForm Model="@EzGreenProfile" OnValidSubmit="ConfirmDeleteYes">
                

                <div style="text-align:right">
                    <input type="text" class="form-control" placeholder="שם פרטי" @bind-value="Pname" />
                    
                </div>
                <br />
                <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="@SpinnerBool"></SfSpinner>

                <div style="text-align:right">
                    <input id="ImageUpload" type="file" class="form-control" @bind-value="Ppicture" accept="image/*" capture>
                    
                </div>
                <br />
                <div class="button-container" style="text-align:center">
                    <button type="submit" class="btn btn-success">
                        אישור
                    </button>
                    <button style="margin-right:25px"
                            class="btn btn-danger"
                            @onclick="(()=>ShowNewProfileDialog=false)">
                        ביטול
                    </button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

@*Modal Error*@
<SfDialog Width="250px" IsModal="true" @bind-Visible="@IsVisible" EnableRtl="true">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Header>שגיאה!</Header>
        <Content> @ModalError </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="אישור" IsPrimary="true" OnClick="@CloseDialog" />

    </DialogButtons>
</SfDialog>

@code{
    const string userProfile = "userProfile";


    EzGreenProfile EzGreenProfile { get; set; } = new EzGreenProfile();
    List<EzGreenProfile> ezGreenProfiles { get; set; } = new List<EzGreenProfile>();

    string noteContent;
    string Pname, Ppicture;

    // Show New Profile Dialog
    public bool ShowNewProfileDialog { get; set; } = false;

    //Dialog Spinner
    bool SpinnerBool { get; set; } = false;


    #region MODAL ERROR CONTENT
    /// <summary>
    /// Modal Props and actions
    /// </summary>
    private bool IsVisible { get; set; } = false;

    //DESTROY MODAL VISABILITY
    private bool DestroyVisability { get; set; } = false;

    private string ModalError { get; set; } = "";

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void OnOverlayclick(MouseEventArgs arg)
    {
        this.IsVisible = false;
    }
    private void CloseDialog()
    {
        this.IsVisible = false;
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {

        ezGreenProfiles = await localStorage.GetItemAsync<List<EzGreenProfile>>(userProfile);

    }

    //Add New Or More Green Profile
    private async void ConfirmDeleteYes()
    {

        try
        {
            //Getting Image path as string
            var imagePath = Ppicture;

            //encode to Base64
            string imgBase64String = Logic.GetBase64StringForImage(imagePath);

            //if no Ez Profiles at all...
            if (ezGreenProfiles != null && ezGreenProfiles.Count > 0)
            {
                var maxProfileId = ezGreenProfiles.Select(x => x.ProfileId).Max();
                maxProfileId++;

                //Max of 10 Profiles
                if (!Logic.MaxUsers(maxProfileId))
                {
                    ezGreenProfiles.Add(new EzGreenProfile { ProfileId = maxProfileId, ProfileName = Pname, ProfilePicture = Pname });

                }
                else
                {
                    ModalError = "ניתן לרשום עד 10 תוים!";
                    IsVisible = true;

                    return;
                }
            }
            else
            {
                ezGreenProfiles = new List<EzGreenProfile>();

                ezGreenProfiles.Add(new EzGreenProfile { ProfileId = 1, ProfileName = Pname, ProfilePicture = Ppicture });
                ShowNewProfileDialog = false;
            }
            //insert to LocalStorage
            await localStorage.SetItemAsync(userProfile, ezGreenProfiles);
            ShowNewProfileDialog = false;
            await OnInitializedAsync();
        }
        catch(Exception e)
        {
            ShowNewProfileDialog = false;
            Console.WriteLine(e.Message);
        }
    }

    public async void UpdateLocalStorage()
    {
        EzGreenProfile EzGreenProfile = new EzGreenProfile();
        EzGreenProfile.ProfileName = noteContent;
        EzGreenProfile.ProfilePicture = noteContent;

        await localStorage.SetItemAsync(userProfile, EzGreenProfile);
    }


    public async void ClearLocalStorage()
    {
        noteContent = "";
        await localStorage.ClearAsync();
    }


}